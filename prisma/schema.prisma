generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id          Int      @id @default(autoincrement())
  propertyId  Int? // Clave foránea opcional
  proyectId   Int? // Clave foránea opcional
  countryId   Int? // Clave foránea opcional
  stateId     Int? // Clave foránea opcional
  city        String?
  postalCode  String?
  streetName  String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  property  Property?   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  proyect   Proyect?    @relation(fields: [proyectId], references: [id], onDelete: Cascade)
  country   Country?    @relation(fields: [countryId], references: [id])
  state     State?      @relation(fields: [stateId], references: [id])
  positions Positions[]

  @@map("address")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Country {
  id          Int           @id @default(autoincrement())
  name        String
  prefix      String?
  code        String?
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userProfile UserProfile[]
  address     Address[]

  @@map("countries")
}

model Currency {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  flagCode  String?
  name      String
  symbol    String
  rate      Float
  apiUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currencies")
}

model Property {
  id            Int             @id @default(autoincrement())
  slug          String          @unique
  title         String
  description   String?         @db.Text
  price         Decimal         @default(0.00) @db.Decimal(12, 2)
  bedrooms      Int
  bathrooms     Int
  squareMeters  Float
  propertyType  PropertyState
  listingType   ListingType
  isAvailable   Boolean         @default(true)
  yearBuilt     Int?
  parkingSpaces Int?
  amenities     Json?
  quantity      Int             @default(1)
  images        PropertyImage[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  address       Address[]

  @@map("properties")
}

model PropertyImage {
  id         Int      @id @default(autoincrement()) // Identificador único de la imagen de la propiedad
  url        String // URL donde se almacena la imagen
  propertyId Int // ID de la propiedad asociada
  property   Property @relation(fields: [propertyId], references: [id]) // Relación con la propiedad

  @@map("property_images") // Mapea el modelo PropertyImage a la tabla "property_images" en la base de datos
}

model Proyect {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Address     Address[]

  @@map("proyects")
}

model Positions {
  id        Int     @id @default(autoincrement())
  addressId Int
  longitude String?
  latitude  String?

  address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role          @default(CUSTOMER)
  status        Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  activity      UserActivity?
  profile       UserProfile?

  @@map("users")
}

model UserActivity {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  registerIp String?
  lastIp     String?
  agent      String?
  onlineTime DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model UserProfile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  countryId      Int
  stateId        Int
  city           String?
  cp             String?
  document       String?
  documentNumber String?
  phone          String?
  address        String?
  avatar         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  country        Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  state          State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([countryId], map: "user_profiles_countryId_fkey")
  @@index([stateId], map: "user_profiles_stateId_fkey")
  @@map("user_profiles")
}

model State {
  id          Int           @id @default(autoincrement())
  countryId   Int
  name        String
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userProfile UserProfile[]
  address     Address[]

  @@map("states")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  SELLER
  BUILDERS
  INVESTORS
  CUSTOMER
}

enum PropertyState {
  APARTMENT
  HOUSE
}

enum ListingType {
  SALE
  RENT
}
