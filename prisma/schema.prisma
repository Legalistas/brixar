generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id          Int      @id @default(autoincrement())
  propertyId  Int? // Clave foránea opcional
  proyectId   Int? // Clave foránea obligatoria para evitar errores de uno a uno
  countryId   Int? // Clave foránea opcional
  stateId     Int? // Clave foránea opcional
  city        String?
  postalCode  String?
  streetName  String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  property  Property?   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  proyect   Proyect?    @relation(fields: [proyectId], references: [id], onDelete: Cascade)
  country   Country?    @relation(fields: [countryId], references: [id])
  state     State?      @relation(fields: [stateId], references: [id])
  positions Positions[]

  @@map("address")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Country {
  id          Int           @id @default(autoincrement())
  name        String
  prefix      String?
  code        String?
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userProfile UserProfile[]
  address     Address[]

  @@map("countries")
}

model Currency {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  flagCode  String?
  name      String
  symbol    String
  rate      Float
  apiUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currencies")
}

model Property {
  id            Int             @id @default(autoincrement())
  slug          String          @unique
  title         String
  description   String?         @db.Text
  price         Decimal         @default(0.00) @db.Decimal(12, 2)
  bedrooms      Int
  bathrooms     Int
  squareMeters  Float
  propertyType  PropertyState
  listingType   ListingType
  isAvailable   Boolean         @default(true)
  yearBuilt     Int?
  parkingSpaces Int?
  amenities     Json?
  quantity      Int             @default(1)
  status        PropertyStatus  @default(EN_VENTA)
  images        PropertyImage[]
  videos        PropertyVideo[] // Añadimos la relación con los videos
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  address       Address[]
  Visit         Visit[]
  inquiries     Inquiry[]       
  sales         Sale[]          // Añadimos la relación para conectar con Sale

  @@map("properties")
}

model PropertyImage {
  id         Int      @id @default(autoincrement()) // Identificador único de la imagen de la propiedad
  url        String // URL donde se almacena la imagen
  propertyId Int // ID de la propiedad asociada
  property   Property @relation(fields: [propertyId], references: [id]) // Relación con la propiedad

  @@map("property_images") // Mapea el modelo PropertyImage a la tabla "property_images" en la base de datos
}

model PropertyVideo {
  id          Int      @id @default(autoincrement()) 
  url         String // URL donde se almacena el video
  title       String? // Título opcional del video
  description String? @db.Text // Descripción opcional del video
  thumbnail   String? // URL de la miniatura del video
  isPublished Boolean @default(false) // Indica si el video está publicado
  propertyId  Int // ID de la propiedad asociada
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade) // Relación con la propiedad

  @@map("property_videos") // Mapea el modelo a la tabla "property_videos" en la base de datos
}

model Proyect {
  id             Int                  @id @default(autoincrement())
  slug           String               @unique
  title          String
  openingLine    String?              @db.Text
  description    String?              @db.Text
  promotorId     Int? // Hacemos que sea opcional
  openingPhase   Int?
  phase          ProyectPhase         @default(FUNDING)
  businessModel  BusinessModel
  fundedDate     DateTime?
  projectMedia   ProyectMedia[]
  details        Json?
  timeline       Json?
  daysToEnd      Int?
  priority       Int?
  daysToStart    Int?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now())
  address        Address[]
  // Relación opcional con User
  promotor       User?                @relation(fields: [promotorId], references: [id], onDelete: Cascade)
  proyectDetails ProyectDetails?
  proyectFound   ProyectFound?
  costs          ProyectCost[]        // Relación con los costos del proyecto
  compensations  ProyectCompensation[] // Relación con las compensaciones entre inversores

  @@map("proyects")
}

model ProyectDetails {
  id                 Int     @id @default(autoincrement())
  proyectId          Int     @unique
  type               String?
  investmentPeriod   Int?
  surface            Int?
  rooms              Int?
  floors             Int?
  features           Json?
  buildingYear       Int?
  riskScore          Int?
  profitabilityScore Int?

  proyect Proyect? @relation(fields: [proyectId], references: [id], onDelete: Cascade)

  @@map("proyect_details")
}

model ProyectFound {
  id                          Int       @id @default(autoincrement())
  proyectId                   Int       @unique
  startInvestDate             DateTime?
  endInvestDate               DateTime?
  startPreFundingDate         DateTime?
  endPreFundingDate           DateTime?
  companyCapital              Decimal   @default(0.00) @db.Decimal(20, 2)
  quantityFunded              Decimal   @default(0.00) @db.Decimal(20, 2)
  quantityToFund              Decimal   @default(0.00) @db.Decimal(20, 2)
  maxOverfunding              Decimal   @default(0.00) @db.Decimal(20, 2)
  investors                   Int?
  proyect                     Proyect?  @relation(fields: [proyectId], references: [id], onDelete: Cascade)
  investor                    User?     @relation(fields: [investors], references: [id], onDelete: Cascade)
  fields                      Json?
  rentProfitability           Decimal   @default(0.00) @db.Decimal(20, 2)
  totalNetProfitability       Decimal   @default(0.00) @db.Decimal(20, 2)
  totalNetProfitabilityToShow Decimal   @default(0.00) @db.Decimal(20, 2)
  apreciationProfitability    Decimal   @default(0.00) @db.Decimal(20, 2)

  @@map("proyect_found")
}

model ProyectMedia {
  id          Int      @id @default(autoincrement())
  proyectId   Int?
  link        String
  type        String
  title       String
  description String?  @db.Text
  proyect     Proyect? @relation(fields: [proyectId], references: [id], onDelete: Cascade)

  @@map("proyect_media")
}

model ProyectCost {
  id                Int       @id @default(autoincrement())
  proyectId         Int
  fecha             DateTime  // FECHA
  mes               String    // MES (puede ser representado como un string, ej: "Enero 2024")
  rubro             String    // RUBRO
  proveedor         String    // PROVEEDOR
  detalle           String?   @db.Text // DETALLE
  importePesos      Decimal   @db.Decimal(12, 2) // IMPORTE PESOS
  precioDolarBlue   Decimal   @db.Decimal(12, 2) // PRECIO U$S BLUE VENDEDOR
  importeDolar      Decimal   @db.Decimal(12, 2) // IMPORTE U$D
  inversor          String?   // INVERSOR (Oscar Andereggen, Agustín Andereggen u otro)
  usuarioId         Int       // USUARIO QUE ABONO - ID de usuario
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  proyect           Proyect   @relation(fields: [proyectId], references: [id], onDelete: Cascade)
  usuario           User      @relation(fields: [usuarioId], references: [id])

  @@index([proyectId])
  @@index([usuarioId])
  @@map("proyect_costs")
}

model Positions {
  id        Int     @id @default(autoincrement())
  addressId Int
  longitude String?
  latitude  String?

  address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model Sale {
  id                     Int        @id @default(autoincrement())
  propertyId             Int
  buyerId                Int        // Usuario que compra
  sellerId               Int?       // Usuario admin/vendedor
  inquiryId              Int?       @unique // Hacemos inquiryId único para la relación uno a uno
  price                  Decimal    @db.Decimal(12, 2)
  status                 SaleStatus @default(PENDING)
  paymentMethod          String?
  paymentReference       String?
  documents              Json?      // Para almacenar referencias a documentos
  notes                  String?    @db.Text
  
  // Datos detallados del comprador
  buyerDocumentType      String?    // Tipo de documento del comprador (DNI, Pasaporte, etc.)
  buyerDocumentNumber    String?    // Número de documento del comprador
  buyerAddress           String?    // Dirección del comprador
  buyerPhone             String?    // Teléfono del comprador
  
  // Datos detallados de la venta
  saleDate               DateTime?  // Fecha oficial de la venta
  contractNumber         String?    // Número de contrato
  signingPlace           String?    // Lugar de firma
  
  // Datos de pago
  totalAmount            Decimal?   @db.Decimal(12, 2) // Importe total incluyendo todos los gastos
  downPayment            Decimal?   @db.Decimal(12, 2) // Pago inicial
  financedAmount         Decimal?   @db.Decimal(12, 2) // Monto financiado
  financingTermMonths    Int?       // Plazo de financiamiento en meses
  interestRate           Decimal?   @db.Decimal(5, 2)  // Tasa de interés anual
  monthlyPayment         Decimal?   @db.Decimal(12, 2) // Pago mensual
  
  // Gastos legales
  legalExpenses          Decimal?   @db.Decimal(12, 2) // Gastos legales
  transferTaxes          Decimal?   @db.Decimal(12, 2) // Impuestos de transferencia
  notaryFees             Decimal?   @db.Decimal(12, 2) // Honorarios notariales
  registrationFees       Decimal?   @db.Decimal(12, 2) // Gastos de inscripción
  
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  
  property               Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  buyer                  User       @relation("BuyerSales", fields: [buyerId], references: [id])
  seller                 User?      @relation("SellerSales", fields: [sellerId], references: [id])
  inquiry                Inquiry?   @relation(fields: [inquiryId], references: [id], onDelete: SetNull)
  transactions           SaleTransaction[]

  @@index([propertyId])
  @@index([buyerId]) 
  @@index([sellerId])
  @@index([inquiryId])
  @@map("sales")
}

model SaleTransaction {
  id              Int      @id @default(autoincrement())
  saleId          Int
  amount          Decimal  @db.Decimal(12, 2)
  type            String   // PAYMENT, REFUND, etc.
  status          String   // COMPLETED, PENDING, FAILED
  paymentMethod   String?
  reference       String?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  
  sale            Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@map("sale_transactions")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id                Int                  @id @default(autoincrement())
  name              String?
  email             String               @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              Role                 @default(CUSTOMER)
  status            Boolean              @default(true)
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  accounts          Account[]
  sessions          Session[]
  activity          UserActivity?
  profile           UserProfile?
  Visit             Visit[]
  Proyect           Proyect[]
  ProyectFound      ProyectFound[]
  inquiries         Inquiry[]            // Relación con consultas
  messages          InquiryMessage[]     // Relación con mensajes
  buyerSales        Sale[]               @relation("BuyerSales")  // Ventas donde es comprador
  sellerSales       Sale[]               @relation("SellerSales") // Ventas donde es vendedor
  proyectCosts      ProyectCost[]        // Relación con los costos que ha abonado
  compensations     ProyectCompensation[] // Relación con compensaciones registradas

  @@map("users")
}

model UserActivity {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  registerIp String?
  lastIp     String?
  agent      String?
  onlineTime DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model UserProfile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  countryId      Int?      // Ahora es opcional
  stateId        Int?      // Ahora es opcional
  city           String?
  cp             String?
  document       String?
  documentNumber String?
  phone          String?
  address        String?
  avatar         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  country        Country?  @relation(fields: [countryId], references: [id], onDelete: SetNull)  // Relación opcional
  state          State?    @relation(fields: [stateId], references: [id], onDelete: SetNull)    // Relación opcional
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([countryId], map: "user_profiles_countryId_fkey")
  @@index([stateId], map: "user_profiles_stateId_fkey")
  @@map("user_profiles")
}

model State {
  id          Int           @id @default(autoincrement())
  countryId   Int
  name        String
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userProfile UserProfile[]
  address     Address[]

  @@map("states")
}

model Visit {
  id         Int      @id @default(autoincrement())
  propertyId Int
  userId     Int
  visitDate  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([propertyId])
  @@index([userId])
  @@map("visits")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Inquiry {
  id               Int              @id @default(autoincrement())
  propertyId       Int
  userId           Int
  title            String
  status           InquiryStatus    @default(OPEN)
  offeredPrice     Decimal?         @db.Decimal(12, 2)
  negotiatedPrice  Decimal?         @db.Decimal(12, 2)
  adminAccepted    Boolean          @default(false)
  clientAccepted   Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  property         Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         InquiryMessage[]
  sale             Sale?            // Relación con la venta generada

  @@index([propertyId])
  @@index([userId])
  @@map("inquiries")
}

model InquiryMessage {
  id          Int       @id @default(autoincrement())
  inquiryId   Int
  userId      Int
  message     String    @db.Text
  isAdmin     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  inquiry     Inquiry   @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([inquiryId])
  @@index([userId])
  @@map("inquiry_messages")
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  RESOLVED
}

enum Role {
  ADMIN
  SELLER
  BUILDERS
  INVESTORS
  CUSTOMER
}

enum PropertyState {
  APARTMENT
  HOUSE
}

enum ListingType {
  SALE
  RENT
}

enum ProyectPhase {
  IN_STUDY
  FUNDING
  CONSTRUCTION
  COMPLETED
}

enum BusinessModel {
  SOLD
  RENT
  TRUST
  POZO
}

enum PropertyStatus {
  EN_VENTA
  RESERVADA
  VENDIDA
}

enum SaleStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

// Modelo para compensaciones entre inversores
model ProyectCompensation {
  id              Int       @id @default(autoincrement())
  proyectId       Int
  fecha           DateTime  
  mes             String    // Formato "YYYY-MM" para agrupar por mes
  detalle         String?   @db.Text
  importePesos    Decimal   @db.Decimal(12, 2)
  precioDolarBlue Decimal   @db.Decimal(12, 2)
  importeDolar    Decimal   @db.Decimal(12, 2)
  inversorOrigen  String    // Inversor que envía los fondos
  inversorDestino String    // Inversor que recibe los fondos
  usuarioId       Int       // Usuario que registra la compensación
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  proyect         Proyect   @relation(fields: [proyectId], references: [id], onDelete: Cascade)
  usuario         User      @relation(fields: [usuarioId], references: [id])

  @@index([proyectId])
  @@index([usuarioId])
  @@map("proyect_compensations")
}
